#include "global.th"
#include "hal.th"
#include "modbus.th"

static tibbit_slot _slots[] = { // This array describes all available GPIO lines

	{ TB_NONE, { PL_IO_NUM_9_TX0, 	PL_IO_NUM_8_RX0, 	PL_IO_NUM_0, 	PL_IO_NUM_16_INT0 }, 0 }, // slot 0 -> S1 
	{ TB_NONE, { PL_IO_NUM_32, 		PL_IO_NUM_33, 		PL_IO_NUM_4, 	PL_IO_NUM_20_INT4 }, 0 }, // slot 1 -> S3
	{ TB_NONE, { PL_IO_NUM_11_TX1, 	PL_IO_NUM_10_RX1, 	PL_IO_NUM_1, 	PL_IO_NUM_17_INT1 }, 0 }, // slot 2 -> S5
	{ TB_NONE, { PL_IO_NUM_34, 		PL_IO_NUM_35, 		PL_IO_NUM_5, 	PL_IO_NUM_21_INT5 }, 0 }, // slot 3 -> S7
	{ TB_NONE, { PL_IO_NUM_13_TX2, 	PL_IO_NUM_12_RX2, 	PL_IO_NUM_2, 	PL_IO_NUM_18_INT2 }, 0 }, // slot 4 -> S9
	{ TB_NONE, { PL_IO_NUM_36, 		PL_IO_NUM_37, 		PL_IO_NUM_6, 	PL_IO_NUM_22_INT6 }, 0 }, // slot 5 -> S11
	{ TB_NONE, { PL_IO_NUM_15_TX3, 	PL_IO_NUM_14_RX3, 	PL_IO_NUM_3, 	PL_IO_NUM_19_INT3 }, 0 }, // slot 6 -> S13
	{ TB_NONE, { PL_IO_NUM_38, 		PL_IO_NUM_39, 		PL_IO_NUM_7, 	PL_IO_NUM_23_INT7 }, 0 }, // slot 7 -> S15
/* Remaining (upper row) slots counts GPIO lines in reverse, from RIGHT to LEFT! 
 */	
	{ TB_NONE, { PL_IO_NUM_24, 		PL_IO_NUM_25, 		PL_IO_NUM_26,	PL_IO_NUM_27 },	0 }, // slot 8 -> S17
	{ TB_NONE, { PL_IO_NUM_28, 		PL_IO_NUM_29, 		PL_IO_NUM_30,	PL_IO_NUM_31 },	0 }, // slot 9 -> S19
	{ TB_NONE, { PL_IO_NUM_40, 		PL_IO_NUM_41, 		PL_IO_NUM_42, 	PL_IO_NUM_43 },	0 }, // slot 10 -> S21
	{ TB_NONE, { PL_IO_NUM_54, 		PL_IO_NUM_55, 		0, 				0 }, TBSLOT_PIN_C_ALLOC|TBSLOT_PIN_D_ALLOC }, // slot 11 -> S23, lines A and B only
	{ TB_NONE, { PL_IO_NUM_44, 		0, 					0, 				0 }, TBSLOT_PIN_B_ALLOC|TBSLOT_PIN_C_ALLOC|TBSLOT_PIN_D_ALLOC }, // slot 13 -> S23, line A only

};


// FIXME: JIRA bug TIDE-327. 
//static ioport _ports[COUNTOF(_slots)*4]; // 4 is number of GPIO pins per tibbit slot
static ioport _ports[13*4]; // 4 is number of GPIO pins per tibbit slot


/*! \brief Install tibbit in selected slot
 * \returns Error code or HAL_SUCCESS
 */
hal_error 
tibbit_install(tbslot slot, tibbit tb)
{
	tibbit_info *ti;
	
	if(slot >= COUNTOF(_slots))
		return HAL_WRONG_SLOT; // Prevent buffer overruns

	if(TB_NONE == tb)
		return HAL_SUCCESS;

	if(_slots[slot].tb != TB_NONE)
		return HAL_SLOT_OCCUPIED;

	ti = tibbit_getinfo(tb);
	if(NULL == ti) 
		return HAL_NULL_POINTER;

	/* Skip connector tibbits, pushbuttons and LEDs because they
	 * must be installed in even-numbered slots
	 */
	if(0 != (ti->pins & TBSLOT_C1_OR_C2))
		return HAL_WRONG_TIBBIT_TYPE; 

	/* Skip reserved/missing tibbits
	 */
	if(0 == ti->slots)
		return HAL_WRONG_TIBBIT_TYPE; 
		
	/* Wide tibbits requires special care: they can be placed
	 * only in even-numbered slots
	 */
	if(ti->slots == 2 && (0 != (slot % 2)))
		return HAL_WRONG_SLOT;
	
	_slots[slot].tb = tb;
	_slots[slot].flags = ti->pins & TBSLOT_PIN_USAGE_MASK;
	
	return HAL_SUCCESS;
}

static ioport *
_ioport_get()
{
	byte i;
	
	for(i=0; i<COUNTOF(_ports); ++i)
		if(_ports[i].type == IO_NONE)
			return &_ports[i];
			
	return NULL;
}


static ioport *
_ioport_alloc_rs485(tbslot slot)
{
	ioport *res;
	byte i;
	
	if((_slots[slot].tb != TB_02) && (_slots[slot].tb != TB_05))
		return NULL;
	
	if(slot != 0 && slot != 1 && slot != 2 && slot != 3)
		return NULL; 
	i = slot;


	/* Slot must have pins 0,1,2 to be free
	 */
	if(0 != (_slots[slot].flags & (TBSLOT_PIN_A_ALLOC|TBSLOT_PIN_B_ALLOC|TBSLOT_PIN_C_ALLOC)))
		return NULL; // Slot is somehow occupied

	res = _ioport_get();
	if(NULL == res)
		return NULL;
		
	_slots[slot].flags |= TBSLOT_PIN_A_ALLOC | TBSLOT_PIN_B_ALLOC | TBSLOT_PIN_C_ALLOC;
	
	res->type = IO_RS485;
	res->d.ser.role = SR_UART;
	res->d.ser.spn = i;
	res->d.ser.tx = _slots[slot].pin[0];
	res->d.ser.rx = _slots[slot].pin[1];
	res->d.ser.dir = 0;
	res->ci.start = 0;
	res->ci.count = 1;

	if(_slots[slot].tb == TB_05) {
		res->d.ser.dir = _slots[slot].pin[2];
		io.num = res->d.ser.dir;
		io.enabled = YES;
		io.state = HIGH;
	}
	
	serial_setup(res);
			
	return res;
}



/*! \brief Allocate I/O port
 * \returns I/O port descriptor (pointer) or NULL if error occurs
 * \param slot Number of slot when tibbit must be installed
 * \param type I/O port type
 * \n Number of slot pin (0...3), or -1 to auto-allocate first free pin
 * \note Different I/O port types require different number of pins. For example
 * SSI/I2C/1W ports requires 2 adjacent pins; moreover, first pin must be 0 or 2 (if
 * explicitly requested) or port allocation will fail.
 */
ioport *
ioport_alloc(tbslot slot, iotype type, char n)
{
	ioport *res;
	byte i, f;
	
	if(n < -1 || n > 3)
		return NULL;
		
	switch(type) {

		case IO_RS485:
			return _ioport_alloc_rs485(slot);
		
		default:
			break;
	}
	return NULL;
}

iotype 
ioport_type(ioport *port)
{
	return (NULL == port)? IO_NONE: port->type;
}