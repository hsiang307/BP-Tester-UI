include "display.tbh"

dim MAX_NUM_OF_SENSORS as byte = 147
dim MAX_SENSOR_ID_NUM as byte = 10
dim MIN_SENSOR_ID_NUM as byte = 1

dim sensor_no(147) as byte
dim sensor_type(147) as byte
dim sensor_data(147) as string

dim poll_sensors as boolean=false
dim ok_to_poll as boolean=false

dim pattern_timer as dword = sys.timercount32

dim x,y,z as byte=0
dim timer as byte=0
dim screen as byte=0
dim id as byte = 1
dim LED as byte=0
dim total_detected_sensors as byte=0
dim total_num_pages as byte=0
dim current_page as byte=0

'Initializes LCD screen

sub lcd_init()

	lcd.width=320
	lcd.height=240
	io.num=PL_IO_NUM_55
	io.enabled=YES
	io.num=PL_IO_NUM_43
	io.enabled=YES
	io.num=PL_IO_NUM_42
	io.enabled=YES
	io.num=PL_IO_NUM_41
	io.enabled=YES
	io.num=PL_IO_NUM_40
	io.enabled=YES
	lcd.iomapping="55,43,42,41,40,0" 
	lcd.rotated=YES 
	lcd.enabled=YES
	io.num=PL_IO_NUM_54 
	io.enabled=YES
	io.state=LOW
	io.num=PL_IO_NUM_44
	io.enabled=YES
	io.state=LOW
	kp.returnlinesmapping="36,37,38,39"
	kp.enabled=YES
	beep.divider=0
	io.num=46
	io.enabled=YES
	io.num=47
	io.enabled=YES
	io.num=48
	io.enabled=YES
	pat.play("~G",PL_PAT_CANINT)
	set_LED(&b00000)
	home_screen()

end sub


sub on_kp(key_event as pl_kp_event_codes, key_code as byte)

	if key_event=PL_KP_EVENT_PRESSED then
		beep.play("B*",PL_BEEP_CANINT)
		pat.play("G~",PL_PAT_CANINT)
		
		if screen=0 then
			select case key_code
			case 0:
				poll_sensors=false
				scanning_sensors_screen()
				lcd_scan()
				ok_to_poll=true
			case 1:
				if ok_to_poll=true then
					poll_sensors=true
					current_page=0
				end if
			case 2:
				poll_sensors=false
				ok_to_poll=false
				upload_firmware_screen()
				screen=1
			case 3:
				poll_sensors=false
				ok_to_poll=false
				set_id_screen()		
				screen=2
				
			end select
		
		
		else if screen=1 then
			select case key_code
			case 0:
				home_screen()
				screen=0
			case 3:
				do_xmodem_upload("MonitorUpdater.bin")
			end select
	
		else if screen=2 then
			select case key_code
			case 0:
				home_screen()
				screen=0
			case 1:
				if id>MIN_SENSOR_ID_NUM then
					id=id-1
				else 
					id=MAX_SENSOR_ID_NUM
				end if
				change_id()
			case 2:
				if id<MAX_SENSOR_ID_NUM then
					id=id+1
				else
					id=MIN_SENSOR_ID_NUM
				end if
				change_id()
			case 3:
				reprogram_address(0,id)
			end select		
		end if
		
	end if
	
	
end sub

'Prints properties screen and sets LED.

sub home_screen()
	
	lcd.lock
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Hexagon Sensor Test",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.print("ID",10,50)
	lcd.print("Type",70,50)
	lcd.print("Data",190,50)
	lcd.horline(5,315,75)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=25544
	lcd.print("Scan",30,227)
	lcd.print("Poll",107,227)
	lcd.printaligned("Upload Firmware",177,222,50,50)
	lcd.print("Set ID",260,227)
	lcd.forecolor=65535 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.unlock

end sub

sub set_id_screen()
	
	id=1
	lcd.lock
	clear_screen() 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Set ID",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=25544
	lcd.print("Exit",30,227)
	lcd.print("-",112,227)
	lcd.print("+",203,227)
	lcd.print("Set ID",260,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Select the new ID.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on sensor.", 15,75,295,160)
	lcd.printaligned("3. Press the SET button.", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,145,295,160)
	lcd.forecolor=65535
	lcd.print("ID: ",15,180)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print(str(id),45,180)
	lcd.forecolor=0
	lcd.unlock

end sub

sub change_id()

	lcd.forecolor=0
	lcd.fill(45,180,60,30)
	lcd.forecolor=65535
	lcd.print("ID: ",15,180)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print(str(id),45,180)
	lcd.forecolor=0	
	
end sub

sub on_sys_timer()
	if poll_sensors=true then
		timer=timer+1
		if timer>=2 then
			lcd_poll()
			timer=0
		end if
	end if
end sub

'Prints properties screen and sets LED.

sub lcd_scan()
	kp.enabled=NO
	dim b as byte=0
	dim percent as word
	reset_sensors()
	
	for b=MIN_SENSOR_ID_NUM to MAX_SENSOR_ID_NUM
		percent = (b*100)/MAX_SENSOR_ID_NUM
		update_scanning_sensors_screen(percent)
		if x>=MAX_NUM_OF_SENSORS then
			max_sensors_screen()
			exit for
		end if
		scan_sensors(b)
	next b
	
	for b=0 to MAX_NUM_OF_SENSORS-1
		if sensor_no(b)<>0 then
			get_sensor_type(sensor_no(b))
		end if
	next b	
	total_detected_sensors=x
	scan_successful_screen()
	lcd.lock
	
	for b=0 to 5
		if sensor_no(b)<>0 then
			lcd.print(str(sensor_no(b)),10,90+(20*b))
			lcd.print("0",190,90+(20*b))
			select case sensor_type(b)
			case 1:lcd.print("Temp/Hum",70,90+(20*b))
			case 2:lcd.print("Temp",70,90+(20*b))
			case 3:lcd.print("Light",70,90+(20*b))
			end select
		end if
	next b
	
	if total_detected_sensors mod 6=0 then
		total_num_pages=total_detected_sensors/6
	else 
		total_num_pages=(total_detected_sensors/6)+1
	end if
	
	lcd.unlock
	kp.enabled=YES
	set_LED(&b00000)
end sub

sub lcd_poll()
	
	dim b,c as byte=0
	dim start_index as byte = current_page * 6
	x=start_index
	y=start_index
	z=start_index
	
	for b=start_index to start_index+5
		if sensor_no(b)<>0 then
			get_sensor_data(sensor_no(b),sensor_type(b))
		end if
	next b	
				
	dim position as word = 0
	for b=start_index to start_index+5
		
		if sensor_no(b)<>0 then
			lcd.print(str(sensor_no(b)),10,90+(20*position))
			lcd.print(str(sensor_data(b)),190,90+(20*position))
			select case sensor_type(b)
			case 1:
				clear_line(position)
				lcd.print("Temp/Hum",70,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("Offline",190,90+(20*position))
				else
					c=instr(1,sensor_data(b),"x",1)
					lcd.print(left(sensor_data(b),c-1)+ "C " + right(sensor_data(b),len(sensor_data(b))-c) + "%",190,90+(20*position))
				end if				
			case 2:
				clear_line(position)
				lcd.print("Temp",70,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("Offline",190,90+(20*position))
				else
					lcd.print(sensor_data(b)+ "C",190,90+(20*position))
				end if
			case 3:
				clear_line(position)
				lcd.print("Light",70,90+(20*position))
				if sensor_data(b)="" then
					lcd.print("Offline",190,90+(20*position))
				else
					lcd.print(sensor_data(b)+ " lx",190,90+(20*position))
				end if
			end select
		end if
	position=position+1
	next b
	lcd.print("Page "+ str(current_page+1)+"/"+str(total_num_pages),227,12)
	lcd.unlock
	
end sub

sub clear_line(position as word)
	
	lcd.forecolor=0
	lcd.fill(190,90+(20*position),124,17)
	lcd.forecolor=65535
		
end sub

sub set_sensor_id(id as byte)

sensor_no(x)=id
	x=x+1
	
end sub

sub on_button_pressed()
	
	if poll_sensors=true then
	
		if current_page<total_num_pages-1 then
			current_page=current_page+1
		else
			current_page=0
		end if
		lcd.lock
		lcd.forecolor=0
		lcd.fill(6,80,308,135)
		lcd.forecolor=65535	
		lcd.unlock
	end if
	
end sub

sub set_sensor_type(stype as byte)

	sensor_type(y)=stype
	y=y+1

end sub
	
sub set_sensor_data(data as string)

	sensor_data(z)=data
	z=z+1

end sub
	
sub scanning_sensors_screen()
	
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Scanning for sensors",60,100)
	
end sub

sub update_scanning_sensors_screen(percent as word)
	if percent<10 then
		lcd.print(str(percent) +"% complete",105,130)
	else
		lcd.print(str(percent) +"% complete",95,130)
	end if
	lcd.rectangle(60,170,260,190)
	lcd.fill(60,170,percent*2,20)
	led_upload_pattern()
end sub

sub firmware_upload_in_prog_screen()

	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Uploading Firmware",70,100)

end sub

sub update_firmware_upload_screen(currentpack as word, totalpacks as word)

	dim percent as word
	percent = (currentpack*100)/totalpacks
	if percent<10 then
		lcd.print(str(percent) +"% complete",105,130)
	else
		lcd.print(str(percent) +"% complete",95,130)
	end if
	lcd.rectangle(60,170,260,190)
	lcd.fill(60,170,percent*2,20)
	led_download_pattern()
	
end sub

sub upload_successful_screen()

	set_LED(&b11111)
	clear_screen() 
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Upload Successful!",80,120)
	sys.timercountms=0
	while sys.timercountms<3000
	wend
	set_LED(&b00000)
	upload_firmware_screen()
	
end sub

sub scan_successful_screen()

	set_LED(&b11111)
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Scan Successful!",80,100)
	lcd.print(str(x) +" Sensors Detected!",65,140)
	sys.timercountms=0
	while sys.timercountms<1000
	wend
	set_LED(&b00000)
	home_screen()
	
end sub

sub max_sensors_screen()

	set_LED(&b11111)
	
	clear_screen() 
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Maximum number of sensors",30,85)
	lcd.print("detected!",115,110)
	lcd.print("Stopping scan!",95,150)
	sys.timercountms=0
	while sys.timercountms<1000
	wend
		
end sub

'sub duplicate_id_screen()
'	set_LED(&b11111)
'	clear_screen()
'	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
'	lcd.print("Duplicate slave IDs detected!",30,85)
'	lcd.print("Please ensure all slaves have",115,125)
'	lcd.print("Unique IDs!",95,150)
'	sys.timercountms=0
'	while sys.timercountms<1000
'	wend
		
'end sub

sub upload_firmware_screen()
	
	lcd.lock
	clear_screen()
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Upload Firmware",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=25544
	lcd.print("Exit",30,227)
	lcd.print("Upload",260,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Disconnect sensor power.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on sensor.", 15,75,295,160)
	lcd.printaligned("3. Connect power without releasing MD button", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,165,295,160)
	lcd.printaligned("5. Press upload.", 15,190,295,160)
	lcd.forecolor=0
	lcd.unlock

end sub


'Sets LED pattern. Different pattern used for each different screen.

sub set_LED(pattern as byte)

	dim f,x as byte
	dim s as string(8)
	
	s=mid(bin(pattern),3,8)
	s=strgen(8-len(s),"0")+s	
	
	'make 5 clocks
	io.num=PL_IO_NUM_47
	for f=0 to 4
		x=1-val(mid(s,f+4,1))
		io.lineset(PL_IO_NUM_48,x)
		io.state=LOW
		io.state=HIGH
	next f
	
end sub

sub led_upload_pattern()
	pat.play("~G",PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if LED<4 then
			LED=LED+1
		else
			LED=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case LED
	case 0:
		set_LED(&b00001)
	case 1:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 3:
		set_LED(&b01000)
	case 4:
		set_LED(&b10000)
	end select	
	
	
end sub

sub led_download_pattern()
	pat.play("~G",PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if LED<4 then
			LED=LED+1
		else
			LED=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case LED
	case 4:
		set_LED(&b00001)
	case 3:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 1:
		set_LED(&b01000)
	case 0:
		set_LED(&b10000)
	end select	
	
	
end sub

sub upload_failed_screen()
		
	set_LED(&b11111)
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Upload Failed!",90,100)
	lcd.print("Please Try Again!",75,140)
	sys.timercountms=0
	while sys.timercountms<3000
	wend
	set_LED(&b00000)
	home_screen()
		
end sub

sub unknown_sensor_screen()
		
	set_LED(&b11111)
	clear_screen()
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Unknown Sensor Detected!",40,120)
	sys.timercountms=0
	while sys.timercountms<3000
	wend
	set_LED(&b00000)
	home_screen()
		
end sub

sub reset_sensors()
	
	dim counter as byte
	x=0
	y=0
	z=0
	
	for counter=0 to MAX_NUM_OF_SENSORS-1
		sensor_no(counter)=0
		sensor_type(counter)=0
		sensor_data(counter)=0
	next counter
	
end sub

sub clear_screen()

	lcd.forecolor=0
	lcd.fill(0,0,lcd.width,lcd.height)
	lcd.backcolor=0
	lcd.forecolor=65535 
	
end sub

sub delay_ms(ms as dword)
	sys.timercountms = 0
	while sys.timercountms < ms
	wend	
end sub
