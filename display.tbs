include "display.tbh"
declare sub set_id()
dim poll_sensors as boolean=false
dim sensor_no(10) as byte
dim sensor_type(10) as byte
dim sensor_data(10) as string
dim x,y,z as byte=0
dim timer as byte=0
dim screen as byte=0
dim id as byte = 1
'Initializes LCD screen

sub lcd_init()

	lcd.width=320
	lcd.height=240
	io.num=PL_IO_NUM_55
	io.enabled=YES
	io.num=PL_IO_NUM_43
	io.enabled=YES
	io.num=PL_IO_NUM_42
	io.enabled=YES
	io.num=PL_IO_NUM_41
	io.enabled=YES
	io.num=PL_IO_NUM_40
	io.enabled=YES
	lcd.iomapping="55,43,42,41,40,0" 
	lcd.rotated=YES 
	lcd.enabled=YES
	io.num=PL_IO_NUM_54 
	io.enabled=YES
	io.state=LOW
	io.num=PL_IO_NUM_44
	io.enabled=YES
	io.state=LOW
	kp.returnlinesmapping="36,37,38,39"
	kp.enabled=YES
	beep.divider=0
	io.num=46
	io.enabled=YES
	io.num=47
	io.enabled=YES
	io.num=48
	io.enabled=YES
	home_screen()

end sub


sub on_kp(key_event as pl_kp_event_codes, key_code as byte)

	if key_event=PL_KP_EVENT_PRESSED then
		beep.play("B*",PL_BEEP_CANINT)
		pat.play("G~",PL_PAT_CANINT)
		
		if screen=0 then
			select case key_code
			case 0:
				poll_sensors=false
				wait_screen()
				lcd_scan()
			case 1:
				poll_sensors=true
			case 2:
				poll_sensors=false
				upload_firmware_screen()				 
				screen=1
			case 3:
				poll_sensors=false
				set_id_screen()				
				screen=2
				
			end select
		
		
		else if screen=1 then
			select case key_code
			case 0:
				home_screen()
				screen=0
			case 3:
				upload_firmware()
			end select
	
	
		else if screen=2 then
			select case key_code
			case 0:
				home_screen()
				
				screen=0
			case 1:
				if id>1 then
					id=id-1
				end if
				
				change_id()
			case 2:
				if id<247 then
					id=id+1
				end if
				change_id()
			case 3:
				reprogram_address(0,id)
			end select		
		end if
		
	end if
	
	sys.debugprint("Poll Sensor:" + stri(poll_sensors) + "\r\n")
	
end sub

'Prints properties screen and sets LED.

sub home_screen()
	
	lcd.lock
	
	lcd.forecolor=0
	lcd.fill(0,0,lcd.width,lcd.height)
	lcd.backcolor=0
	lcd.forecolor=65535 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Hexagon Sensor Test",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.print("ID",10,50)
	lcd.print("Type",70,50)
	lcd.print("Data",190,50)
	lcd.horline(5,315,75)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=25544
	lcd.print("Scan",30,227)
	lcd.print("Poll",107,227)
	lcd.printaligned("Upload Firmware",177,222,50,50)
	lcd.print("Set ID",260,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.unlock

end sub



sub set_id_screen()
	
	lcd.lock
	
	lcd.forecolor=0
	lcd.fill(0,0,lcd.width,lcd.height)
	lcd.backcolor=0
	lcd.forecolor=65535 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Set ID",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=25544
	lcd.print("Exit",30,227)
	lcd.print("-",112,227)
	lcd.print("+",203,227)
	lcd.print("Set ID",260,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Select the new ID.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on sensor.", 15,75,295,160)
	lcd.printaligned("3. Press the SET button.", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,145,295,160)
	lcd.forecolor=65535
	lcd.print("ID: ",15,180)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print(str(id),45,180)
	lcd.forecolor=0
	
	
	
	
	
	
	lcd.unlock

end sub

sub change_id()
	lcd.forecolor=0
	lcd.fill(45,180,60,30)
	lcd.forecolor=65535
	lcd.print("ID: ",15,180)
	lcd.forecolor=val("&b"+strgen(lcd.greenbits/&hFF,"1")+strgen(lcd.greenbits And &hFF,"0"))
	lcd.print(str(id),45,180)
	lcd.forecolor=0
	
	
end sub

sub on_sys_timer()
	if poll_sensors=true then
		timer=timer+1
		if timer>=2 then
			lcd_poll()
			timer=0
		end if
	end if
	
end sub

'Prints properties screen and sets LED.

sub lcd_scan()
	dim b as byte=0
	x=0
	y=0
	z=0
	

	for b=1 to 10
		scan_sensors(b)
	next b
	
	for b=0 to 9 
		if sensor_no(b)<>0 then
			get_sensor_type(sensor_no(b))
		end if
	next b	
	
	home_screen()
	lcd.lock
	
	for b=0 to 9 
		if sensor_no(b)<>0 then
			lcd.print(str(sensor_no(b)),10,90+(20*b))
			lcd.print(str(sensor_data(b)),190,90+(20*b))
			select case sensor_type(b)
			case 1:lcd.print("Temp",70,90+(20*b))
			case 2:lcd.print("Temp/Hum",70,90+(20*b))
			case 3:lcd.print("Light",70,90+(20*b))
			end select
		end if
	next b
	
	lcd.unlock

end sub

sub lcd_poll()

	dim b as byte=0
	x=0
	y=0
	z=0
	
	for b=0 to 9 
		if sensor_no(b)<>0 then
			get_sensor_data(sensor_no(b),sensor_type(b))
		end if
	next b	
	
		
	lcd.lock
	lcd.forecolor=0
	lcd.fill(190,90,120,130)
	lcd.forecolor=65535
	for b=0 to 9 
		if sensor_no(b)<>0 then
			lcd.print(str(sensor_no(b)),10,90+(20*b))
			lcd.print(str(sensor_data(b)),190,90+(20*b))
			select case sensor_type(b)
			case 1:lcd.print("Temp",70,90+(20*b))
			case 2:lcd.print("Temp/Hum",70,90+(20*b))
			case 3:lcd.print("Light",70,90+(20*b))
			end select
			
		end if
	next b
	lcd.unlock
end sub

'dim pval as dword
'sub set_id()
	
'	lcd.lock
	
'	lcd.forecolor=0
'	lcd.fill(0,0,lcd.width,lcd.height)
'	lcd.backcolor=0
'	lcd.forecolor=65535 
'	romfile.open("11x19(HP).bin")
'	lcd.setfont(romfile.offset)
'	lcd.print("SET ID",100,50)
'	'modbus_request(p, 0, READ_HOLDING_REGISTERS, 200, 1, "");
''	modbus_init()
''	pval = getPPointerValue()
''	modbus_request2(pval, 0, 3, 200, 1, "")



	
'	lcd.print(get_id(),5,90)

'	lcd.unlock

'end sub

sub set_sensor_id(id as byte)

	sensor_no(x)=id
	x=x+1

end sub

sub set_sensor_type(stype as byte)

	sensor_type(y)=stype
	y=y+1

end sub
	
sub set_sensor_data(data as string)

	sensor_data(z)=data
	z=z+1

end sub
	
sub delay_mls(ms as dword)

	sys.timercountms = 0
	while sys.timercountms < ms
	wend	

end sub

sub wait_screen()
	
	lcd.forecolor=0
	lcd.fill(0,0,lcd.width,lcd.height)
	lcd.backcolor=0
	lcd.forecolor=65535 
	lcd.rectangle(20,20,lcd.width-20,lcd.height-20)
	lcd.print("Scanning for sensors",60,100)
	lcd.print("Please wait",105,130)
	
end sub


sub upload_firmware_screen()
	
	lcd.lock
	
	lcd.forecolor=0
	lcd.fill(0,0,lcd.width,lcd.height)
	lcd.backcolor=0
	lcd.forecolor=65535 
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)
	lcd.print("Upload Firmware",5,12)
	lcd.horline(5,315,40)
	lcd.verline(5,40,240)
	lcd.verline(80,220,240)
	lcd.verline(160,220,240)
	lcd.verline(240,220,240)
	lcd.horline(5,315,239)
	lcd.verline(315,40,240)
	lcd.horline(5,315,220)
	romfile.open("Tibbo-5x7(V).bin")
	lcd.setfont(romfile.offset)	
	lcd.forecolor=25544
	lcd.print("Exit",30,227)
	lcd.print("Restart",260,227)
	lcd.forecolor=65535 
	romfile.open("logosmall.bmp")
	lcd.bmp(romfile.offset,245,0,0,0,lcd.width,lcd.height)
	romfile.open("11x19(HP).bin")
	lcd.setfont(romfile.offset)	
	lcd.printaligned("1. Disconnect sensor power.", 15,50,295,160)
	lcd.printaligned("2. Press and hold MD button on sensor.", 15,75,295,160)
	lcd.printaligned("3. Connect power without releasing MD button", 15,120,295,160)
	lcd.printaligned("4. Release the MD button.", 15,165,295,160)
	lcd.forecolor=0
	lcd.unlock

end sub

sub upload_firmware()
	
end sub