#include "global.th"
#include "modbus.th"
#define MODBUS_TIMEOUT 5000
#define MB_RQ_SIZE sizeof(modbus_req)
static modbus_state _state;
static dword _timeout;
static string _packet; 	// data accumulation buffer
static byte _pdu_len;	// PDU length byte

void
modbus_init()
{
	_state = MODBUS_IDLE;
}

/* \brief CRC generation function */
word 
crc16(byte *data, byte byte_cnt)
{
    byte crc_hi = 0xFF;  
    byte crc_lo = 0xFF; 
    word idx; 
    
    while(byte_cnt--) { 
        idx = crc_hi ^ *data++; 
        crc_hi = crc_lo ^ _crc_table_hi[idx];
        crc_lo = _crc_table_lo[idx];
    }
	return (crc_hi << 8) | crc_lo;
}


/*! \brief Issue ModBus request */
void
modbus_request(byte devaddr, byte request, word start, word count, string regdata)
{
	string<MB_RQ_SIZE+4> data;
	data = chr(devaddr);
	data += chr(request);
	data += chr(start >> 8);
	data += chr(start & 0xFF);
	if(0 == len(regdata)) {
		data += chr(count >> 8);
		data += chr(count & 0xFF);
	} else {
		data += regdata;
	}
	word crc = crc16((byte *)&data[0], len(data));
	data += chr(crc >> 8);
	data += chr(crc & 0xFF);
	_packet = "";
	_state = MODBUS_IDLE;
	_timeout = sys.timercountms + MODBUS_TIMEOUT;
	serial_send(data);
}

/* This routine should be called either from on_sock_data_arrival() or 
 * on_ser_data_arrival() event handlers
 * Routine receives and parses ModBus PDU
 */
void
on_modbus_data_arrival()
{
	string tmp = "";
	tmp = ser.getdata(255);
	switch(_state) {
		case MODBUS_FINISHED:
			sys.debugprint("Previous ModBus packet was not processed");
		case MODBUS_IDLE:
			_packet = "";
			_state = MODBUS_RECEIVING;
			/* fall through to the next case */
		case MODBUS_RECEIVING:
			_packet += tmp;
			break;
	}
	if(len(_packet) >= 2) {
		_pdu_len = _packet[2] + 5; // Byte count, including slave address, crc, byte length and function code
		if(len(_packet) >= _pdu_len) {
			delay_ms(1);
			//char c = "&hFF" 
			string c1 = _packet[9];
			string c2 = _packet[10];
			if(c1=="-86"  && c2=="85"){	
				_state = MODBUS_FINISHED;			
			}
			else{
				unknown_sensor_screen();
			}
		}
	}
}
void
reprogram_address(byte oldaddr, byte newaddr)
{
	string args;
	args = chr(0) +  chr(newaddr);
	modbus_request(oldaddr, PRESET_SINGLE_REGISTER, SCAN_SENSORS, 1, args);
}

void
scan_sensors(unsigned char w)
{
	modbus_request(w, READ_HOLDING_REGISTERS, SCAN_SENSORS, 4, "");
	get_response();
	if (modbus_finished()){
		set_sensor_id(w);
	}
}

void
get_sensor_type(unsigned char w)
{
	string result;
	modbus_request(w, READ_INPUT_REGISTERS, GET_SENSOR_TYPE, 1, "");
	get_response();
	result = modbus_result();
	result=result[4];
	set_sensor_type(result);
}

void
get_sensor_data(unsigned char w,unsigned char x)
{
	string result, rawdata;
	
	switch(x){
	case 1:	//temp&hum
		modbus_request(w, READ_INPUT_REGISTERS, READ_TEMP_H_VALUE, 1, "");
		break;
	case 2:	//temp
		modbus_request(w, READ_INPUT_REGISTERS, READ_TEMP_VALUE, 1, "");
		break;
	case 3:	//light
		modbus_request(w, READ_INPUT_REGISTERS, READ_LIGHT_VALUE, 1, "");
		break;
	default:
	}
	get_response();
	rawdata = modbus_result();
	if(rawdata != "") {
			switch(x) {
				case 1:
					result=get_temp_and_hum(rawdata, w);
					break;
				case 2:
					result=get_temp(rawdata);
					break;
				case 3:
					result=get_light(rawdata);
					break;
				default:
				return;
		}
	}
	set_sensor_data(result);
}

string 
get_temp_and_hum(string rawdata, unsigned char w){
	string temp, hum, result;
	temp=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	temp=left(temp,len(temp)-1)+"."+right(temp,1);
	if (len(temp)<=2){
	temp="0"+temp;
	}
	modbus_request(w, READ_INPUT_REGISTERS, READ_HUM_VALUE, 1, "");
	get_response();
	rawdata = modbus_result();
	hum=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	hum=left(hum,len(hum)-1)+"."+right(hum,1);
	if (len(hum)<=2){
	hum="0"+hum;
	};
	result=temp+"x"+hum;
	return result;
} 

string 
get_temp(string rawdata){
	string temp;
	temp=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	temp=left(temp,len(temp)-2)+"."+right(temp,2);
	if (len(temp)<=3){
	temp="0"+temp;
	}
	return temp;
}

string 
get_light(string rawdata){
	string light;
	light=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	light=val(light);
	return light;
}

string
hex_to_dec(string hi,string lo)
{
	string dec_val;
	if (len(lo)==3){
		lo="0"+right(lo,1);
	}else{
		lo=right(lo,2);
	}
	dec_val=hi+lo;
	dec_val=val(dec_val);
	return dec_val;	
}

void get_response(){
	sys.timercountms=0;
	while(!modbus_finished()){
		on_modbus_data_arrival();
		if (sys.timercountms>100){
		break;
		}
	}
}

bool
modbus_finished()
{
	return _state == MODBUS_FINISHED;
}

string
modbus_result()
{
	return _packet;
}