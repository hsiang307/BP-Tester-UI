#include "global.th"
#include "modbus.th"

#define MB_RQ_SIZE sizeof(modbus_req)
static modbus_state _state;
static dword _timeout;
static string _packet; 	// data accumulation buffer
static byte _pdu_len;	// PDU length byte

void
modbus_init()
{
	_state = MODBUS_IDLE;
}

/* \brief CRC generation function */
word 
crc16(byte *data, byte byte_cnt)
{
    byte crc_hi = 0xFF;  
    byte crc_lo = 0xFF; 
    word idx; 
    
    while(byte_cnt--) { 
        idx = crc_hi ^ *data++; 
        crc_hi = crc_lo ^ _crc_table_hi[idx];
        crc_lo = _crc_table_lo[idx];
    }
	return (crc_hi << 8) | crc_lo;
}


/*! \brief Issue ModBus request */
void
modbus_request(ioport *port, byte devaddr, byte request, word start, word count, string regdata)
{
	string<MB_RQ_SIZE+4> data;
	data = chr(devaddr);
	data += chr(request);
	data += chr(start >> 8);
	data += chr(start & 0xFF);
	if(0 == len(regdata)) {
		data += chr(count >> 8);
		data += chr(count & 0xFF);
	} else {
		data += regdata;
	}
	word crc = crc16((byte *)&data[0], len(data));
	data += chr(crc >> 8);
	data += chr(crc & 0xFF);
	_packet = "";
	_state = MODBUS_IDLE;
	_timeout = sys.timercountms + MODBUS_TIMEOUT;
	serial_send(port, data);
}

/* This routine should be called either from on_sock_data_arrival() or 
 * on_ser_data_arrival() event handlers
 * Routine receives and parses ModBus PDU
 */
void
on_modbus_data_arrival(modbus_source src)
{
	string tmp = "";
	tmp = ser.getdata(255);
	switch(_state) {
		case MODBUS_FINISHED:
			sys.debugprint("Previous ModBus packet was not processed");
		case MODBUS_IDLE:
			_packet = "";
			_state = MODBUS_RECEIVING;
			/* fall through to the next case */
		case MODBUS_RECEIVING:
			_packet += tmp;
			break;
	}
	if(len(_packet) >= 2) {
		_pdu_len = _packet[2] + 5; // Byte count, including slave address, crc, byte length and function code
		if(len(_packet) >= _pdu_len) {
			delay_ms(1);
			//char c = "&hFF" 
			string c1 = _packet[9];
			string c2 = _packet[10];
			if(c1=="-86"  && c2=="85"){	
				_state = MODBUS_FINISHED;			
			}
			else{
				unknown_sensor_screen();
			}
		}
	}
}

bool
modbus_finished()
{
	return _state == MODBUS_FINISHED;
}

string
modbus_result()
{
	return _packet;
}